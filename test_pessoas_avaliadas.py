"""
Teste do endpoint /api/pessoas-avaliadas
"""
import requests
import json

try:
    # Testar endpoint
    print("üîç Testando endpoint /api/pessoas-avaliadas...")
    response = requests.get("http://localhost:8000/api/pessoas-avaliadas", params={"limit": 3})
    
    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ Sucesso! Status: {response.status_code}")
        print(f"üìä Total de registros retornados: {data.get('count', 0)}")
        
        if data.get('data') and len(data['data']) > 0:
            print("\nüìã Estrutura do primeiro registro:")
            primeiro = data['data'][0]
            print(json.dumps(primeiro, indent=2, ensure_ascii=False))
            
            print("\nüîë Chaves dispon√≠veis:")
            for key in primeiro.keys():
                print(f"  - {key}: {type(primeiro[key]).__name__}")
            
            # Verificar se tem GESTOR e NOME
            if 'GESTOR' in primeiro:
                print(f"\n‚úÖ Campo GESTOR encontrado: '{primeiro['GESTOR']}'")
            else:
                print("\n‚ùå Campo GESTOR N√ÉO encontrado!")
                
            if 'NOME' in primeiro:
                print(f"‚úÖ Campo NOME encontrado: '{primeiro['NOME']}'")
            else:
                print("‚ùå Campo NOME N√ÉO encontrado!")
                
            # Mostrar todos os gestores √∫nicos
            print("\nüë• Gestores √∫nicos nos dados:")
            gestores = set()
            for item in data['data']:
                gestor = item.get('GESTOR', '')
                if gestor:
                    gestores.add(gestor)
            
            for gestor in sorted(gestores):
                print(f"  - {gestor}")
                
        else:
            print("‚ö†Ô∏è Nenhum dado retornado")
    else:
        print(f"‚ùå Erro! Status: {response.status_code}")
        print(f"Resposta: {response.text}")
        
except Exception as e:
    print(f"‚ùå Erro ao testar: {e}")
