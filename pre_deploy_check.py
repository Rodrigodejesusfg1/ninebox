#!/usr/bin/env python3
"""
Script de verifica√ß√£o pr√©-deploy
Verifica se todos os arquivos necess√°rios est√£o presentes e configurados
"""

import os
import sys
from pathlib import Path

def check_file_exists(filename, required=True):
    """Verifica se um arquivo existe"""
    exists = Path(filename).exists()
    status = "‚úÖ" if exists else ("‚ùå" if required else "‚ö†Ô∏è")
    print(f"{status} {filename}")
    return exists

def check_env_vars():
    """Verifica vari√°veis de ambiente"""
    print("\nüîç Verificando vari√°veis de ambiente:")
    
    required_vars = ["SUPABASE_URL", "SUPABASE_KEY"]
    all_set = True
    
    for var in required_vars:
        value = os.getenv(var)
        if value:
            print(f"‚úÖ {var} est√° configurada")
        else:
            print(f"‚ùå {var} N√ÉO est√° configurada")
            all_set = False
    
    return all_set

def main():
    print("üöÄ Verifica√ß√£o Pr√©-Deploy - NineBox")
    print("=" * 50)
    
    print("\nüìÅ Verificando arquivos necess√°rios:")
    
    required_files = [
        "api.py",
        "app.js",
        "config.js",
        "index.html",
        "ninebox.html",
        "requirements.txt",
        "runtime.txt",
        "render.yaml",
        ".gitignore",
    ]
    
    optional_files = [
        "DEPLOY.md",
        ".renderignore",
        "README.md",
    ]
    
    all_required_present = True
    for file in required_files:
        if not check_file_exists(file, required=True):
            all_required_present = False
    
    for file in optional_files:
        check_file_exists(file, required=False)
    
    # Verificar conte√∫do do requirements.txt
    print("\nüì¶ Verificando depend√™ncias:")
    try:
        with open("requirements.txt", "r") as f:
            deps = f.read()
            required_deps = ["fastapi", "uvicorn", "supabase", "python-dotenv"]
            for dep in required_deps:
                if dep in deps.lower():
                    print(f"‚úÖ {dep}")
                else:
                    print(f"‚ùå {dep} faltando em requirements.txt")
    except FileNotFoundError:
        print("‚ùå requirements.txt n√£o encontrado")
    
    # Verificar render.yaml
    print("\n‚öôÔ∏è Verificando render.yaml:")
    try:
        with open("render.yaml", "r") as f:
            content = f.read()
            if "ninebox-api" in content:
                print("‚úÖ Servi√ßo API configurado")
            else:
                print("‚ö†Ô∏è Servi√ßo API pode n√£o estar configurado")
            
            if "ninebox-frontend" in content:
                print("‚úÖ Servi√ßo Frontend configurado")
            else:
                print("‚ö†Ô∏è Servi√ßo Frontend pode n√£o estar configurado")
    except FileNotFoundError:
        print("‚ùå render.yaml n√£o encontrado")
    
    # Verificar vari√°veis de ambiente (apenas para teste local)
    if Path(".env").exists():
        from dotenv import load_dotenv
        load_dotenv()
        check_env_vars()
    else:
        print("\n‚ö†Ô∏è Arquivo .env n√£o encontrado (ok para produ√ß√£o no Render)")
        print("   Certifique-se de configurar as vari√°veis no Dashboard do Render")
    
    # Resultado final
    print("\n" + "=" * 50)
    if all_required_present:
        print("‚úÖ PRONTO PARA DEPLOY!")
        print("\nüìù Pr√≥ximos passos:")
        print("1. Commitar todas as mudan√ßas: git add . && git commit -m 'Deploy setup'")
        print("2. Fazer push: git push origin main")
        print("3. Criar servi√ßo no Render usando o render.yaml")
        print("4. Configurar vari√°veis de ambiente no Render Dashboard")
        print("5. Atualizar config.js com a URL da API ap√≥s o deploy")
        return 0
    else:
        print("‚ùå ALGUNS ARQUIVOS NECESS√ÅRIOS EST√ÉO FALTANDO")
        print("   Verifique os itens marcados com ‚ùå acima")
        return 1

if __name__ == "__main__":
    sys.exit(main())
